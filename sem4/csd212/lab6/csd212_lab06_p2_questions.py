# -*- coding: utf-8 -*-
"""CSD212_Lab06_P2_Questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nNcfhZ653FdWOlacFgN6H-NAxHPG0wV7

#[10MARKS]

# Prerequisite
* Load required packages and load images (already uploaded on  blackboard content) in Colab
* Create your own copy of notebook and add required code snippets in between the questions subsections. Also display the figures at each stage.
*Colab can be exported as a notebook file or Python file by **File > Download .ipynb** or **File > Download .py**. Exported notebook files can be reloaded into Google Colab or used in Jupyter Notebook.
* Please go through [Colab document](https://colab.research.google.com/drive/1YKHHLSlG-B9Ez2-zf-YFxXTVgfC_Aqtt) for further information.

* **Use ONLY tensorflow operations and basic numpy operations are allowed**
* **VISUALIZE IMAGE AT ALL SUBQUESTIONS**
* **At all subquestion, kindly normalize image if required**
"""

import tensorflow as tf
import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np

"""# Q1) Display following stages
## a) Load 'kankal01.png'        

"""

# Read image using TensorFlow
img_path = '/content/kankal_01.png'
# img = tf.io.read_file(img_path)
img = cv.imread(img_path, cv.IMREAD_GRAYSCALE)
img = tf.convert_to_tensor(img, dtype=tf.float32)
# img = tf.image.decode_image(img, channels=1)  # Grayscale image

# Define kernel
kernel_sz1 = tf.ones((1, 1), dtype=tf.float32)

# Change data type of image using TensorFlow
img_a = tf.cast(img, tf.float32)  # Convert image to float32
img_a = tf.nn.conv2d( tf.reshape(img_a, (1,img_a.shape[0],img_a.shape[1],1)),\
                     tf.reshape(kernel_sz1,\
                      (kernel_sz1.shape[0],kernel_sz1.shape[1],1,1)),\
                      strides=[1, 1, 1, 1], padding='SAME')

# Print information about the image
print('Original Data_type is', img.dtype)
print('Kernel_sz1 =', kernel_sz1)
print('Data_type is', img_a.dtype)
print('Image Size is', img_a.shape)
print('Image min and max are ({}, {})'.format(tf.reduce_min(img_a),\
                                              tf.reduce_max(img_a)))

plt.figure(figsize=(10,10))
plt.imshow(tf.squeeze(img_a), cmap='gray')
plt.axis('off')
plt.show()

"""## b) Apply and display Laplacian of a) [1 Marks]

"""



"""## c) Sharpen the image obtained by adding a) and b) [1 Marks]"""



"""## d) Sobel gradient of a) [2 Marks]



"""



"""## e) Smooth the d) with a $5\times 5$ averaging filter [2 Marks]"""



"""## f) Get Mask image formed by pixelwise product of c) and e) [1 Marks]"""



"""## g) Get sharpened image obtained by the sum of a) and f) [1 Marks]"""



"""## h) Get bone enhancing by applying power law transformation to g) [1 Marks]

"""



"""##i) Write down your observation related to image enhancement from a) to h) [1 Marks]"""
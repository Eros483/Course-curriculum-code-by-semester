# -*- coding: utf-8 -*-
"""CSD212_Lab_09_Questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m4wk-t2SVYi42sPBKYaw17pFFzLhbOXP

# Prerequisite
* Load required packages and load images (already uploaded on  Blackboard) in Colab
* Create your own copy of notebook and add required code snippets in between the questions subsections. Also display the figures at each stage.

*Colab can be exported as a notebook file or Python file by **File > Download .ipynb** or **File > Download .py**. Exported notebook files can be reloaded into Google Colab or used in Jupyter Notebook.
* Please go through [Colab document](https://colab.research.google.com/drive/1YKHHLSlG-B9Ez2-zf-YFxXTVgfC_Aqtt) for further information.

* **Use ONLY following numpy and tensorflow/pytorch functions for any operations**
"""

!pip install imagecodecs

import tensorflow as tf
import numpy as np
from scipy import ndimage as nd
from scipy import interpolate as inter
from matplotlib import pyplot as plt
import imageio.v2 as imageio
import scipy.linalg as scla ## For Eigenvalue and Eigenvectors

def RMSD(img1,img2):
  out1 = np.sqrt(np.power(img1-img2, 2).sum()/np.prod(img1.shape))
  return out1

"""#Q1) PCA for Image Denoising of RedFort2_noisy.png
 Assume the pixel dimensions to be equal along both axes, i.e., assume an aspect ratio of 1:1 for the axes.
"""

img_path =  '/content/RedFort2_gray.jpg'
img1_a = imageio.imread(img_path)
#####################  Not Part of Solution ############################
print('Data_type is', img1_a.dtype)
print('Image Size is {}'.format(img1_a.shape))
print('Image min and max are ({}, {})'.format(img1_a.min(),img1_a.max()))
#########################################################################

"""##(a) [**0 Marks**] Show the Original Image"""

plt.figure(figsize=(10,10))
plt.imshow(img1_a, cmap='gray')
plt.axis('off')
plt.show()

"""##(b)[**0 Points**] Show the Corrupted image"""

img_path =  '/content/RedFort2_noisy.png'
img1_b = imageio.imread(img_path)
#####################  Not Part of Solution ############################
print('Data_type is', img1_b.dtype)
print('Image Size is {}'.format(img1_b.shape))
print('Image min and max are ({}, {})'.format(img1_b.min(),img1_b.max()))
#########################################################################

plt.figure(figsize=(10,10))
plt.imshow(img1_b, cmap='gray')
plt.axis('off')
plt.show()

"""<p>Consider Patch $P_{ij}$ of size $p \times p$ around pixel location $(i,j)$ in <b>Corrupted image</b>.
Randomly collect $K=290$ $(p \times p)$ patches from within a $31\times 31$ neighborhood centered at $(i,j)$.</p>
[Note: make sure $P_{ij}$ should be part of $290$ patches]
<p>
Let ${\bar P_{ij}}$ be $(p^2×1)$ column vector of patch $P_{ij}$.
</p>
<p>
Let $X_{ij}$ be matrix of size $(p^2×290)$, where each column represents $p\times p$ patch from $290$ patches.
Let $C_{ij} = X_{ij}X_{ij}^T$ is $(p^2×p^2)$ matrix.
</p>
<p>$w_{ij},v_{ij} = numpy.linalg.eig(C_{ij})$</p>
<p>
Where $w_{ij}$ is $(p^2×1)$ matrix with eigenvalues of $C_{ij}$ and $v_{ij}$ is $(p^2×p^2)$ matrix with corresponding eigenvectors of $C_{ij}$ in columns. Make sure all eigenvectors are unit norm.
</p>
<p>
Let $\alpha_{ij}^k = v_{ij}^TX_{ij}[:,k]$, for $k = \{1,2,...,K\}$, be matrix of size $(p^2×1)$.
</p>
<p>
Let ${\bar \alpha}_{ij}^2[l] = max(0,\frac{1}{K}\sum_{k=1}^K((\alpha_{ij}^k[l])^2-\sigma^2))$, where $l=\{1,2,...,p^2\}$
</p>
<p>
Let $\alpha_{ij} = v_{ij}^T{\bar P_{ij}}$, be matrix of size $(p^2×1)$.
</p>
<p>
Now, $\beta_{ij}[l] = \frac{1}{1+\frac{\sigma^2}{{\bar \alpha}_{ij}^2[l]}}\alpha_{ij}[l]$, where $l=\{1,2,...,p^2\}$ and $\beta_{ij}$ is a matrix of size $(p^2×1)$.
</p>
<p>
Let ${\bar Q_{ij}}= v_{ij}\beta_{ij}$ be matrix of size $(p^2×1)$. Now let $Q_{ij}$ be $(p×p)$ denoised patch from ${\bar Q_{ij}}$.
</p>
<p>
Now replace patch $P_{ij}$ with patch $Q_{ij}$ to denoise image.  
Complete the Following Function
"""

def PCAID(I,psize,wsize,sigma,step_size=8):
  output = np.zeros(I.shape)
  w_ij = np.zeros(I.shape)
  ## Fill the Code ##
  return [output,w_ij]

"""## Now use $PCAID$ function to find following outputs.

##(c)[**4 Points**] Plot image of $max(w_{ij})$, which will be same size as original image

##(d)[**4 Points**]Show the Denoised Image

##(e)[**2 Points**] Print RMSE value between original image and Denoised image
"""
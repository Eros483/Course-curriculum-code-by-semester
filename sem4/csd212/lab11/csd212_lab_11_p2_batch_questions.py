# -*- coding: utf-8 -*-
"""CSD212_Lab_11_P2_Batch_Questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bx-t3ZDTngy5bNxkq8JTQefSQoPZTd_K

# Prerequisite
* Load required packages and load images (already uploaded on  Blackboard) in Colab
* Create your own copy of notebook and add required code snippets in between the questions subsections. Also display the figures at each stage.

*Colab can be exported as a notebook file or Python file by **File > Download .ipynb** or **File > Download .py**. Exported notebook files can be reloaded into Google Colab or used in Jupyter Notebook.
* Please go through [Colab document](https://colab.research.google.com/drive/1YKHHLSlG-B9Ez2-zf-YFxXTVgfC_Aqtt) for further information.

* **Use ONLY following numpy and tensorflow/pytorch functions for any operations**
"""

import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt
import tensorflow as tf

"""#Q1) Laplacian-of-Gaussian of bld.tif
 Assume the pixel dimensions to be equal along both axes, i.e., assume an aspect ratio of 1:1 for the axes.
"""

img =  cv.imread('bld.tif', cv.IMREAD_GRAYSCALE)
kernel_sz1 = np.ones(1)
## Change Data type of image ####################
img = cv.filter2D(img, cv.CV_32F, kernel_sz1)
#################################################
print('Data_type is {}', img.dtype)
print('Image Size is {}'.format(img.shape))
print('Image min and max are ({}, {})'.format(img.min(),img.max()))
plt.figure(figsize=(10,10))
plt.imshow(img, cmap='gray')
plt.axis('off')
plt.show()

"""## Now write a python-tensorflow based function to implement LoG operator. Apply that function to $img$ to get LoG output.
[hint: scale image to lie in $[0,1]$ and rescale back before displaying]

##(a)[**4 Points**] Print LoG output from previous function

##(b)[**2 Points**]Theshold the zero-crossing of LoG output to remove unwanted edges. Display that output.

##(c)[**4 Points**] implement Canny Edge operator from scratch using tensorflow-python without any for-loops. Display the final Canny edge detector output on $img$. Tune the required parameters to get best output.
"""
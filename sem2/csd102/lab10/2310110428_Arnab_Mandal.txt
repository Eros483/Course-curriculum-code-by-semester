Roll no: 2310110428
Name: Arnab Mandal

Program-1:

#include <stdio.h>
#include <stdlib.h>//declaring all necessary libraries

void heapsort(int arr[], int N);
void heap(int arr[], int n, int i);//all necessary functions
void print(int arr[], int n);

//main function
int main() 
{
    int size=0;
    scanf("%d", &size);
    int arr[size];
    int temp;
    for (unsigned int i=0; i<size; i++)
    {
        scanf("%d", &temp);
        arr[i]=temp;
    }
    
    heapsort(arr, size);//sorting accordingly

    print(arr, size);
    return 0;
}
void heapsort(int arr[], int N)//function performing heapsort 
{
    //converting into heap
    for (int i = N / 2 - 1; i >= 0; i--)
    {
        heap(arr, N, i);
    }

    //considering each element seperately
    for (int i = N - 1; i > 0; i--) 
    {
        //swapping
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        //reheaping reduced array
        heap(arr, i, 0);
    }
}

void heap(int arr[], int n, int i)//converting array into heap 
{
    int parent = i; //largest
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    //if left>parent
    if (left < n && arr[left] > arr[parent])
    {
        parent = left;
    }

    //if right?parent
    if (right < n && arr[right] > arr[parent])
    {
        parent = right;
    }

    //if original parent is not root
    if (parent != i) 
    {
        int temp = arr[i];
        arr[i] = arr[parent];
        arr[parent] = temp;

        //recursive affecting subtree
        heap(arr, n, parent);
    }
}

void print(int arr[], int n)//to print array 
{
    for (int i = 0; i < n; ++i)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}